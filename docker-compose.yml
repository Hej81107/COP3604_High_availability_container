version: '3.8'

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: gitea
      POSTGRES_PASSWORD: gitea_pass
      POSTGRES_DB: gitea
    volumes:
      - gitea_data:/var/lib/postgresql/data
    networks:
      - gitea_network
    ports:
      - "5432:5432"
    deploy:
      replicas: 1

  gitea:
    image: gitea/gitea:latest
    init: true
   # user: "1007"
    environment:
      DB_TYPE: postgres
      DB_HOST: postgres
      DB_NAME: gitea
      DB_USER: gitea
      DB_PASSWD: gitea_pass
      GITEA__queue__TYPE: redis
      GITEA__queue__CONN_STR: "redis://redis:6379/0"
      GITEA__queue__QUEUE_NAME: "_queue"
      GITEA__queue__SET_NAME: "_unique"
   
 
      #ROOT_URL: "http://localhost:85"
    volumes:
      - gitea_config:/data
    networks:
      - gitea_network
    ports:
      - "85:3000"
    expose:
      - "85"
    deploy:
      replicas: 3
      labels:
        - "swarm.autoscale=true"
        - "swarm.autoscale.min = 3"
        - "swarm.autoscale.max = 6"
        - "swarm.autoscale.percentage-max=2"
        #- "swarm.autoscale.percentage-min=1"
        - "com.df.notify=true"
        - "com.df.alertName=service_scale_up"
        - "com.df.alertIf=@service_replicas < 6 && @node_cpu_usage > 80"
        - "com.df.alertFor=30s"
        - "com.df.alertLabels.scale=up"
        - "com.df.alertName.2=service_scale_down"
        - "com.df.alertIf.2=@service_replicas > 1 && @node_cpu_usage < 20"
        - "com.df.alertFor.2=2m"
        - "com.df.alertLabels.2.scale=down"
      resources:
        limits:
          cpus: '1.0'
#    healthcheck:
 #      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
  #     interval: 5s
   #    timeout: 5s
    #   retries: 5
  redis:
    image: redis:6
    networks:
     - gitea_network
    volumes:
     - redis_data:/data
    deploy:
       replicas: 1
  
  portainer:
    image: portainer/portainer-ce:latest
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "9000:9000"
    deploy:
      placement:
        constraints: [node.role == manager]
 
#  nginx:
#    image: nginx:alpine
#    container_name: nginx-gitea
#    ports:
#      - "85:80"
#    configs:
#      - source: nginx_config
#        target: /etc/nginx/nginx.conf
#    networks:
#      - gitea_network 


  autoscaler:
    image: eluki/swarm-service-autoscaler:latest
    environment:
      - AUTOSCALER_DNSNAME=tasks.autoscaler
      - AUTOSCALER_INTERVAL=60
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      mode: global
      resources:
        limits:
          cpus: '1.0'
          memory: 100M
    logging:
      driver: "json-file"
      options:
        max-size: "3m"
        max-file: "3"
# traefik:
  #  image: traefik:v3
       
#restart: always
   # container_name: "traefik"
    #command:
     #- "--api.insecure=true"
     #- "--providers.docker=true"
     # - "--entrypoints.web.address=:85"
     # - "--entrypoints.traefik.address=:8081"
     # - "--api.dashboard=true"
     # - "--providers.docker.exposedbydefault=true"
     # - "--accesslog=true"
    #ports:
     # - "85:85"
     # - "8081:8081"
    #volumes:
     # - "/var/run/docker.sock:/var/run/docker.sock"
    #networks:
     # - gitea_network
    #deploy:
     # replicas: 1
      #placement:
       # constraints:
        #  - node.role == manager
    #labels:
     # - "traefik.enable=true"
configs:
  nginx_config:
    file: ./nginx.conf

networks:
  gitea_network:
    driver: overlay

#Ensures containers do not try to create their own temporary volumes
volumes:
  gitea_data:
    external: true
  gitea_config:
    external: true
  redis_data:
  portainer_data:
